1. Write a prolog program to calculate the sum of two numbers.

sum(A, B, C):- 
	C is A + B.

2. Write a Prolog program to implement max(X, Y, M) so that M is the 
maximum of two numbers X and Y. 

max(X, Y, M):- X > Y, M is X, !.
max(X, Y, M):- Y >= X, M is Y.


3. Write a program in PROLOG to implement factorial(N, F) where F 
represents the factorial of a number N.

factorial(0, 1):- !.
factorial(N, F):-
	N > 0,
	N1 is N - 1,
	factorial(N1, F1),
	F is N * F1.

/* 4. Write a program in PROLOG to implement generate fib(N,T) where 
T represents the Nth term of the fibonacci series. */

fib(1, 0):- !.
fib(2, 1):- !.
fib(N, T):-
	N > 2,
	N1 is N - 1,
	N2 is N1 - 1, 
	fib(N1, T1),
	fib(N2, T2),
	T is T1 + T2.



/* 5. Write a Prolog program to implement GCD of two numbers. */

gcd(0, A, A):- !.
gcd(A, 0, A):- !.
gcd(A, B, C):-
	B1 is mod(A, B),
	gcd(B, B1, C).



/* 6. Write a Prolog program to implement power(Num,Pow, Ans) : 
where Num is raised to the power Pow to get Ans. */

power(X, 0, 1):- !.
power(Num, Pow, Ans):-
	Ans is Num^Pow.

/* 7. Prolog program to implement multi(N1, N2, R) : where N1 and N2 
denotes the numbers to be multiplied and R represents the result. */

multi(N1, N2, R):-
	R is N1 * N2.



/* 8. Write a Prolog program to implement memb(X, L): to check 
whether X is a member of L or not. */

memb(X, [X | Tail]).
memb(X, [Head | Tail]):-
  memb(X, Tail).




/* 9. Write a Prolog program to implement conc (L1, L2, L3) where L2 
is the list to be appended with L1 to get the resulted list L3. */

conc([], L, L).
conc([X | L1], L2, [X | L3]):-
  conc(L1, L2, L3).



/* 10. Write a Prolog program to implement reverse (L, R) where 
List L is original and List R is reversed list. */

conc([], L, L).
conc([X|L1], L2, [X|L3]):-
  conc(L1, L2, L3).

reverse([], []).
reverse([Head|Tail], R):-
  reverse(Tail, L1),
  conc(L1, [Head], R).



/* 11. Write a program in PROLOG to implement palindrome(L) 
which checks whether a list L is a palindrome or not. */

conc([], L, L).
conc([X|L1], L2, [X|L3]):-
  conc(L1, L2, L3).

palindrome([]):- !.
palindrome([_]):- !.
palindrome(L):-
  reverse(L,L).



/* 12. Write a Prolog program to implement sumlist(L, S) 
so that S is the sum of a given list L. */

sumList([], 0).
sumList([Head|Tail], S):-
  sumList(Tail, X),
  S is Head + X.





/* 13. Write a Prolog program to implement two predicates
evenlength(List) and oddlength(List) so that they are true 
if their argument is a list of even or odd length respectively. */

evenlength([]):- !.
evenlength([_|T]):- oddlength(T).

oddlength([_]):- !.
oddlength([_|T]):- evenlength(T).





/* 14. Write a Prolog program to implement nth_element(N, L, X) 
where N is the desired position, L is a list and 
X represents the Nth element of L. */

nth_element(1, [H|_], H):- !.
nth_element(N, [_|T], X):-
	N > 0,
	N1 is N - 1,
	nth_element(N1, T, X).




/* 15. Write a Prolog program to implement maxlist(L, M) so that 
M is the maximum number in the list. */

max(X, Y, M):- X > Y, M is X, !.
max(X, Y, M):- Y >= X, M is Y.

maxlist([H], H):- !.
maxlist([H|T], M):-
	maxlist(T, M1),
	max(H, M1, M).




/* 16. Write a prolog program to implement insert_nth(I, N, L, R) that
 inserts an item I into Nth position of list L to generate a list R. */

insert_nth(I, 1, L, [I|L]):- !.
insert_nth(I, N, [H|T], [H|T1]):-
  N1 is N - 1,
  insert_nth(I, N1, T, T1).






/* 17. Write a Prolog program to implement delete_nth(N, L, R) 
that removes the element  on Nth position from a list L 
to generate a list R. */

delete_nth(1, [H|T], T):- !.
delete_nth(N, [H|T], [H|T1]):-
  N1 is N - 1,
  delete_nth(N1, T, T1).





/* 18. Write a program in PROLOG to implement merge(L1, L2, L3)
where L1 is first ordered list and L2 is second ordered list 
and L3 represents the merged list. */

merge([H1|T1], [H2|T2], [H1|T]):-
  H1 < H2, !,
  merge(T1, [H2|T2], T).
merge([H1|T1], [H2|T2], [H2|T]):-
  merge([H1|T1], T2, T), !.
merge(L1, [], L1):- !.
merge([], L2, L2).


delete_all(_,[],[]).

delete_all(X,[X|T],Result):-
    delete_all(X,T,Result).

delete_all(X,[H|T],[H|Result]):-
    delete_all(X,T,Result).


member(X,[X|_]):- !.
member(X,[_|Tail]):- member(X,Tail).
remove_dupli([],[]).
remove_dupli([X|Tail],R):-
    member(X,Tail),
    remove_dupli(Tail,R).

remove_dupli([X|Tail],[X|R]):-
   remove_dupli(Tail,R).




